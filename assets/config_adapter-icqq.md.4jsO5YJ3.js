import{_ as i,c as a,o as s,V as e}from"./chunks/framework.v-NpEqQ7.js";const g=JSON.parse('{"title":"内置适配器(adapter-icqq)","description":"","frontmatter":{},"headers":[],"relativePath":"config/adapter-icqq.md","filePath":"config/adapter-icqq.md","lastUpdated":1695871774000}'),n={name:"config/adapter-icqq.md"},t=e(`<h1 id="内置适配器-adapter-icqq" tabindex="-1">内置适配器(adapter-icqq) <a class="header-anchor" href="#内置适配器-adapter-icqq" aria-label="Permalink to &quot;内置适配器(adapter-icqq)&quot;">​</a></h1><h2 id="icqq由来" tabindex="-1">icqq由来 <a class="header-anchor" href="#icqq由来" aria-label="Permalink to &quot;icqq由来&quot;">​</a></h2><p>在介绍该适配器之前，我想先让你了解一下什么是 <code>icqq</code>，相信知道 <code>QQ</code> <code>NodeJS</code> 机器人生态的都知道 <code>oicq</code>，他是由<code>takayama-lily</code> 大佬维护的 qq 机器人的 SDK。奈何近一年来，大佬似乎琐事缠身，没空更新了，我们便自发开始维护起来，而 <code>icqq</code> 就是所有维护分支中的其中之一，他在保留原有 <code>oicq</code> api 的同时增加了<strong>频道</strong>、<strong>加精/取消加精群消息</strong>的 API，并优化了登录流程（createClient 不再传 uin，在 login 时才传递），更改了底层发布订阅的 EventEmitter为TripTrap，使得使用过滤器监听事件得以实现。</p><h2 id="adapter-icqq的优势" tabindex="-1">adapter-icqq的优势 <a class="header-anchor" href="#adapter-icqq的优势" aria-label="Permalink to &quot;adapter-icqq的优势&quot;">​</a></h2><p>而 <code>adapter-icqq</code> 则是能让你直接在 zhin 中登录使用 icqq 登录个人账号，来作为 qq 机器人的适配器，它不像 <code>go-cqhhtp</code> 和 <code>miral-go</code> 那样，需要你重新启动一个进程而是和 <code>zhin</code>使用同一个进程工作，并且，你可以使用 zhin 去调用 <code>icqq</code> 底层的api，来实现更多功能。</p><p>说了这么多，那怎么配置呢？</p><h2 id="接入到zhin" tabindex="-1">接入到zhin <a class="header-anchor" href="#接入到zhin" aria-label="Permalink to &quot;接入到zhin&quot;">​</a></h2><ul><li><code>adapter-icqq</code>作为内置适配器，接入到zhin十分的简单</li><li>你只需要在配置文件<code>zhin.yaml</code>的<code>adapters</code>中增加如下配置，即可接入一个qq账号：</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">adapters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  icqq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定使用icqq适配器</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    bots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">self_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">147258369</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 机器人账号</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 指定qq登录平台为iPad（可不配置  1：安卓  2：安卓平板  3：手表  4：苹果电脑  5：苹果平板）</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456789</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 机器人密码</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        ver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 指定登录协议版本（可不配置，默认取签名支持的最新版本）</span></span>
<span class="line diff add"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        sign_api_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhin&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 签名接口地址</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 其他icqq配置</span></span></code></pre></div><ul><li>其中 <code>self_id</code> 对应<code>icqq</code> 的 uin，作为一个机器人的唯一标识</li><li><code>platform</code> 代表你要登录的平台，默认为 1</li></ul><h2 id="关于签名" tabindex="-1">关于签名 <a class="header-anchor" href="#关于签名" aria-label="Permalink to &quot;关于签名&quot;">​</a></h2><ul><li>由于 <code>qq</code> 版本升级，现在登录需要签名，而 <code>icqq</code> 也提供了签名的接口，你可以 开源项目 <a href="https://github.com/fuqiuluo/unidbg-fetch-qsign" target="_blank" rel="noreferrer">qsign</a> 自行搭建签名服务，也使用他人提供的签名服务，只需要在配置文件中配置 <code>sign_api_addr</code> 即可。</li><li>需要注意的是，当使用 <code>qsign</code> 自行部署时，请确保 <code>sign_api_addr</code> 中必须携带 <code>?key=\${KEY}</code> (\${KEY} 替换为你qsign配置中的key)，否则将无法正常使用。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>具体更多的配置，请参考 icqq 的<a href="https://icqqjs.github.io/icqq/interfaces/Config.html" target="_blank" rel="noreferrer">Config</a></p></div><p>完成配置后，重启 zhin，将自动开始启动 icqq，当遇到验证时，内置的 <code>login</code> 插件，将提供命令行辅助你完成登录的功能。</p>`,14),d=[t];function l(h,p,c,o,r,k){return s(),a("div",null,d)}const E=i(n,[["render",l]]);export{g as __pageData,E as default};
