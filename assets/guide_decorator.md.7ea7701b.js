import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.8f76c11e.js";const u=JSON.parse('{"title":"装饰器","description":"","frontmatter":{},"headers":[],"relativePath":"guide/decorator.md","filePath":"guide/decorator.md","lastUpdated":1693155457000}'),l={name:"guide/decorator.md"},o=p(`<h1 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>TypeScript Decorator</code>本身就为实验性功能，暂未稳定。但是目前实际上已有很多框架诸如<a href="https://nestjs.com" target="_blank" rel="noreferrer"><code>Nest.js</code></a>、<a href="https://www.midwayjs.org/" target="_blank" rel="noreferrer"><code>Midway</code></a>等框架已经用上很久了，所以暂且先出版本，观望观望。</p></div><blockquote><p>由于装饰器的实验性性质，因此目前仍然处于分包的形式存在在Zhin中。欢迎大家<a href="https://github.com/zhinjs/decorator/issues" target="_blank" rel="noreferrer">点击此处</a>提交issue。</p></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>请先参考<a href="/guide/start.html">安装Zhin机器人</a>创建一个机器人。创建好之后，执行：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-srT--" id="tab-kdr6V-P" checked="checked"><label for="tab-kdr6V-P">pnpm</label><input type="radio" name="group-srT--" id="tab-7LuV6kG"><label for="tab-7LuV6kG">yarn</label><input type="radio" name="group-srT--" id="tab-624L54g"><label for="tab-624L54g">npm</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@zhinjs/decorator</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@zhinjs/decorator</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@zhinjs/decorator</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@zhinjs/decorator</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@zhinjs/decorator</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@zhinjs/decorator</span></span></code></pre></div></div></div><p>然后在项目根目录创建一个<code>tsconfig.json</code>文件(如果已经有了那么请照葫芦画瓢一下，把这两项给加上)：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;emitDecoratorMetadata&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;experimentalDecorators&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;emitDecoratorMetadata&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;experimentalDecorators&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>将上面的两项设置为<code>true</code>。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>熟悉Spring/Nest/Midway等的的开发者应该会很熟悉。</p><p>您可以将@Plugin看成是@Controller。</p><h2 id="撰写一个插件" tabindex="-1">撰写一个插件 <a class="header-anchor" href="#撰写一个插件" aria-label="Permalink to &quot;撰写一个插件&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// plugins/repeater/index.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Command,</span></span>
<span class="line"><span style="color:#E1E4E8;">  CommandDesc,</span></span>
<span class="line"><span style="color:#E1E4E8;">  CommandOption,</span></span>
<span class="line"><span style="color:#E1E4E8;">  CommandSugar,</span></span>
<span class="line"><span style="color:#E1E4E8;">  Inject,</span></span>
<span class="line"><span style="color:#E1E4E8;">  InjectContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">  InjectPlugin,</span></span>
<span class="line"><span style="color:#E1E4E8;">  MessagePattern,</span></span>
<span class="line"><span style="color:#E1E4E8;">  Middleware,</span></span>
<span class="line"><span style="color:#E1E4E8;">  Plugin,</span></span>
<span class="line"><span style="color:#E1E4E8;">  CommandRunTime,</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@zhinjs/decorator&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Next } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;koa&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Session, Context, Plugin </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> IPlugin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;zhin&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { RepeaterService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./repeater.service&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@Plugin</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Repeater</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 注入Plugin Class</span></span>
<span class="line"><span style="color:#E1E4E8;">  @InjectPlugin</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">plugin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IPlugin</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 注入ctx上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">  @InjectContext</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ctx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Context</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 注入一个“服务类”，下面会有说明</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Inject</span><span style="color:#E1E4E8;">(RepeaterService)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">repeaterService</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RepeaterService</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 定义一个中间件。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// !不能与@MessagePattern等交叉混用</span></span>
<span class="line"><span style="color:#E1E4E8;">  @Middleware</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">aMiddleware</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">seesion</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Session</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Next</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    seesion.</span><span style="color:#B392F0;">reply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.repeaterService.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;middleware&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 监听消息事件。允许同一个方法上有多个@MessagePattern</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">MessagePattern</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;icqq.message&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">onMessageReceived</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">seesion</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Session</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    seesion.</span><span style="color:#B392F0;">reply</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;监听到一条消息&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义一个指令</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// !注意：注解是从下往上运行的；但是始终会按照一个顺序：\`初始化命令-&gt;定义option-&gt;定义sugar-&gt;执行action\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * @CommandSugar是允许定义多个的</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">CommandSugar</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">来一首(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [</span><span style="color:#9ECBFF;">&quot;$1&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    options: { platform: </span><span style="color:#9ECBFF;">&quot;qq&quot;</span><span style="color:#E1E4E8;">, origin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">CommandSugar</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;qq点歌&quot;</span><span style="color:#E1E4E8;">, { options: { platform: </span><span style="color:#9ECBFF;">&quot;qq&quot;</span><span style="color:#E1E4E8;">, origin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> } })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * @CommandOption是可以定义多个的</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">CommandOption</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-o [origin:boolean]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">CommandOption</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-p [platform:string]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">CommandOption</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-s [singer:number]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 这是命令的描述</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">CommandDesc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;命令的描述&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * @Command只能允许有一个；如果有多个会被上面的覆盖掉</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;music &lt;keyword:string&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">defineCommand</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">session</span><span style="color:#E1E4E8;"> }</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CommandRunTime</span><span style="color:#E1E4E8;">&lt;{ </span><span style="color:#FFAB70;">platform</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">origin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> }&gt;, </span><span style="color:#FFAB70;">keyword</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;">    session.</span><span style="color:#B392F0;">reply</span><span style="color:#E1E4E8;">(options.origin);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// plugins/repeater/index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  Command,</span></span>
<span class="line"><span style="color:#24292E;">  CommandDesc,</span></span>
<span class="line"><span style="color:#24292E;">  CommandOption,</span></span>
<span class="line"><span style="color:#24292E;">  CommandSugar,</span></span>
<span class="line"><span style="color:#24292E;">  Inject,</span></span>
<span class="line"><span style="color:#24292E;">  InjectContext,</span></span>
<span class="line"><span style="color:#24292E;">  InjectPlugin,</span></span>
<span class="line"><span style="color:#24292E;">  MessagePattern,</span></span>
<span class="line"><span style="color:#24292E;">  Middleware,</span></span>
<span class="line"><span style="color:#24292E;">  Plugin,</span></span>
<span class="line"><span style="color:#24292E;">  CommandRunTime,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@zhinjs/decorator&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Next } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;koa&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Session, Context, Plugin </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> IPlugin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;zhin&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { RepeaterService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./repeater.service&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@Plugin</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Repeater</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 注入Plugin Class</span></span>
<span class="line"><span style="color:#24292E;">  @InjectPlugin</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">plugin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IPlugin</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 注入ctx上下文</span></span>
<span class="line"><span style="color:#24292E;">  @InjectContext</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ctx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Context</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 注入一个“服务类”，下面会有说明</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Inject</span><span style="color:#24292E;">(RepeaterService)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">repeaterService</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RepeaterService</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 定义一个中间件。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// !不能与@MessagePattern等交叉混用</span></span>
<span class="line"><span style="color:#24292E;">  @Middleware</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">aMiddleware</span><span style="color:#24292E;">(</span><span style="color:#E36209;">seesion</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Session</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Next</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    seesion.</span><span style="color:#6F42C1;">reply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.repeaterService.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;middleware&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 监听消息事件。允许同一个方法上有多个@MessagePattern</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">MessagePattern</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;icqq.message&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onMessageReceived</span><span style="color:#24292E;">(</span><span style="color:#E36209;">seesion</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Session</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    seesion.</span><span style="color:#6F42C1;">reply</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;监听到一条消息&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义一个指令</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// !注意：注解是从下往上运行的；但是始终会按照一个顺序：\`初始化命令-&gt;定义option-&gt;定义sugar-&gt;执行action\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * @CommandSugar是允许定义多个的</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">CommandSugar</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">来一首(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    args: [</span><span style="color:#032F62;">&quot;$1&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    options: { platform: </span><span style="color:#032F62;">&quot;qq&quot;</span><span style="color:#24292E;">, origin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">CommandSugar</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;qq点歌&quot;</span><span style="color:#24292E;">, { options: { platform: </span><span style="color:#032F62;">&quot;qq&quot;</span><span style="color:#24292E;">, origin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> } })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * @CommandOption是可以定义多个的</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">CommandOption</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-o [origin:boolean]&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">CommandOption</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-p [platform:string]&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">CommandOption</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-s [singer:number]&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 这是命令的描述</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">CommandDesc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;命令的描述&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * @Command只能允许有一个；如果有多个会被上面的覆盖掉</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;music &lt;keyword:string&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">defineCommand</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">options</span><span style="color:#24292E;">, </span><span style="color:#E36209;">session</span><span style="color:#24292E;"> }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CommandRunTime</span><span style="color:#24292E;">&lt;{ </span><span style="color:#E36209;">platform</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">origin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> }&gt;, </span><span style="color:#E36209;">keyword</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;">    session.</span><span style="color:#6F42C1;">reply</span><span style="color:#24292E;">(options.origin);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，使用装饰器方式写出来的插件会十分<code>清晰易懂</code>，不易写乱。</p><h2 id="撰写一个服务" tabindex="-1">撰写一个服务 <a class="header-anchor" href="#撰写一个服务" aria-label="Permalink to &quot;撰写一个服务&quot;">​</a></h2><p>此处的<code>服务</code>指的是<code>服务类</code>，而非非zhin的<code>服务</code>，请勿搞混；</p><p><code>服务类</code>的作用，是用于封装逻辑；比如访问数据库等某些增删改查的逻辑，就可以封装。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// plugins/repeater/repeater.service.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Injectable } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@zhinjs/decorator&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 标记这是一个服务</span></span>
<span class="line"><span style="color:#6A737D;">// 按道理来说，这个@Injectable是可以和nestjs通用的哦～</span></span>
<span class="line"><span style="color:#6A737D;">// 但是我暂时没有测试过，但是十有八九是通用的，因为nest是可插拔的</span></span>
<span class="line"><span style="color:#E1E4E8;">@Injectable</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RepeaterService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 写一个方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;pattern&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;middleware&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;pattern&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello world! This is a Message Pattern&#39;s message!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;middleware&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello world! This is a middleware message!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// plugins/repeater/repeater.service.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Injectable } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@zhinjs/decorator&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 标记这是一个服务</span></span>
<span class="line"><span style="color:#6A737D;">// 按道理来说，这个@Injectable是可以和nestjs通用的哦～</span></span>
<span class="line"><span style="color:#6A737D;">// 但是我暂时没有测试过，但是十有八九是通用的，因为nest是可插拔的</span></span>
<span class="line"><span style="color:#24292E;">@Injectable</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RepeaterService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 写一个方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">(</span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;pattern&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;middleware&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;pattern&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world! This is a Message Pattern&#39;s message!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;middleware&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world! This is a middleware message!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,19),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const m=s(l,[["render",t]]);export{u as __pageData,m as default};
