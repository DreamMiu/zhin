import{_ as e,C as t,o as c,c as r,H as s,w as n,Q as l,a as o}from"./chunks/framework.3ed515d9.js";const A=JSON.parse('{"title":"指令(Command)","description":"","frontmatter":{},"headers":[],"relativePath":"guide/command.md","filePath":"guide/command.md","lastUpdated":1690162690000}'),E={name:"guide/command.md"},y=l(`<h1 id="指令-command" tabindex="-1">指令(Command) <a class="header-anchor" href="#指令-command" aria-label="Permalink to &quot;指令(Command)&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><ul><li>指令是当一条消息满足一定条件时，约定机器人执行指定一个函数函数</li><li>在大多数机器人中，都是这样实现这个功能的</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">bot.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.raw_message </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行foo函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.raw_message.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.raw_message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.raw_message.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据参数执行bar函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">event.raw_message.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// do sth</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">bot.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">event</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.raw_message </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行foo函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.raw_message.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    event.raw_message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.raw_message.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据参数执行bar函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">event.raw_message.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// do sth</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (condition) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ul><li>这无疑是及其混乱的，而且还不利于维护。</li><li>为此，Zhin 参考市面上的指令实现后，实现了自己的指令系统</li><li>上边的代码在 Zhin 中，可以这么优雅的实现</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ctx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bar &lt;...args&gt;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ctx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  ctx.</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">(foo);</span></span>
<span class="line"><span style="color:#24292E;">  ctx.</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bar &lt;...args&gt;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">((</span><span style="color:#E36209;">argv</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如此定义后: Zhin 会在用户发送的消息为 <code>foo</code> 时，自动执行 <strong>foo 函数</strong>。当用户发送的消息为 <code>bar</code> 开头时，Zhin 自动执行<strong>bar函数</strong>，并将后续的参数按<strong>空格</strong>分隔，传递给 <strong>bar 函数</strong>。</p><p>并且还有更多的使用方式，让我们接着往下看...</p><h2 id="参数定义" tabindex="-1">参数定义 <a class="header-anchor" href="#参数定义" aria-label="Permalink to &quot;参数定义&quot;">​</a></h2><p>如你所见，使用 ctx.command(desc) 方法可以定义一个指令，其中 desc 是一个字符串，包含了<strong>指令名</strong>和<strong>参数列表</strong>。</p><ul><li>指令名可以包含数字、字母、下划线、短横线甚至中文字符，但不应该包含空格、小数点 <code>.</code> 或斜杠 <code>/</code></li><li>一个指令可以含有任意个参数。其中 <strong>必选参数</strong> 用<strong>尖括号</strong>包裹，<strong>可选参数</strong>用<strong>方括号</strong>包裹</li><li>有时我们需要传入未知数量的参数，这时我们可以使用 <strong>变长参数</strong>，它可以通过在括号中前置**...**来实现。如：</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;echo &lt;arg1&gt; [...rest]&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">arg1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">rest</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* do something */</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx.</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;echo &lt;arg1&gt; [...rest]&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">((</span><span style="color:#E36209;">_</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arg1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">rest</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* do something */</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>上面一行代码声明了一个<code>echo</code>指令，并且该指令接收<strong>1到多个参数</strong></p><h3 id="参数类型" tabindex="-1">参数类型 <a class="header-anchor" href="#参数类型" aria-label="Permalink to &quot;参数类型&quot;">​</a></h3><p>知音默认参数类型为消息段，若你需要指定类型，仅需在参数名后跟上 <code>:type</code> 即可，Zhin 内置的数据类型有：</p><ul><li>string: string 字符串</li><li>integer: number 整数</li><li>number: number 数值</li><li>boolean: boolean 布尔值</li><li>user_id: number | string 用户id</li><li>regexp: RegExp 正则表达式</li><li>date: Date 日期</li><li>json: Dict | List JSON对象</li><li>function: Function 函数用例：</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;send &lt;arg1:face&gt; [...rest:number]&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 声明第一个参数为一个表情，剩下的参数均为数值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx.</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;send &lt;arg1:face&gt; [...rest:number]&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 声明第一个参数为一个表情，剩下的参数均为数值</span></span></code></pre></div><p>上面一行代码声明了一个<code>send</code>指令，并且该指令接收<strong>一个表情</strong>和<strong>多个数值</strong>，作为参数</p><h2 id="可选项定义" tabindex="-1">可选项定义 <a class="header-anchor" href="#可选项定义" aria-label="Permalink to &quot;可选项定义&quot;">​</a></h2><p>使用 cmd.option(name, desc) 函数可以给指令定义参数。这个函数也是可以链式调用的，例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ctx</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;music &lt;keyword:string&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-o [origin:boolean]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 是否原声输出</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-p [platform:string]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 选用音乐平台</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-s [singer:number]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 指定歌手id</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> }, </span><span style="color:#FFAB70;">keyword</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(options));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;music &lt;keyword:string&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-o [origin:boolean]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 是否原声输出</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-p [platform:string]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 选用音乐平台</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-s [singer:number]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 指定歌手id</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">options</span><span style="color:#24292E;"> }, </span><span style="color:#E36209;">keyword</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(options));</span></span></code></pre></div>`,21),i=l(`<p>同样，可选项的参数也可以声明类型，声明方式同上</p><h2 id="快捷方式" tabindex="-1">快捷方式 <a class="header-anchor" href="#快捷方式" aria-label="Permalink to &quot;快捷方式&quot;">​</a></h2><p>Zhin 的指令机制虽然能够尽可能避免冲突和误触发，但是也带来了一些麻烦。一方面，一些常用指令的调用会受到指令前缀的限制；另一方面，一些指令可能有较长的选项和参数，但它们调用时却往往是相同的。面对这些情况，<strong>快捷方式 (Shortcut)</strong> 能有效地解决你的问题接下来我们将刚刚上边的 <code>music</code> 指令稍微进行一下改造</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ctx</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;music &lt;keyword:string&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-o [origin:boolean]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 是否原声输出</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-p [platform:string]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 选用音乐平台</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-s [singer:number]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 指定歌手id</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">sugar</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;qq点歌&quot;</span><span style="color:#E1E4E8;">, { options: { platform: </span><span style="color:#9ECBFF;">&quot;qq&quot;</span><span style="color:#E1E4E8;">, origin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> } }) </span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> }, </span><span style="color:#FFAB70;">keyword</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(options));</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;music &lt;keyword:string&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-o [origin:boolean]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 是否原声输出</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-p [platform:string]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 选用音乐平台</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-s [singer:number]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 指定歌手id</span></span>
<span class="line diff add"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">sugar</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;qq点歌&quot;</span><span style="color:#24292E;">, { options: { platform: </span><span style="color:#032F62;">&quot;qq&quot;</span><span style="color:#24292E;">, origin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> } }) </span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">options</span><span style="color:#24292E;"> }, </span><span style="color:#E36209;">keyword</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(options));</span></span></code></pre></div><ul><li>这儿的<code>fuzzy</code>标识指令可以带参数</li></ul>`,5),F=l(`<p>除此以外，你还可以使用正则表达式作为快捷方式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ctx</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;music &lt;keyword:string&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-o [origin:boolean]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 是否原声输出</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-p [platform:string]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 选用音乐平台</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-s [singer:number]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 指定歌手id</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">sugar</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;qq点歌&quot;</span><span style="color:#E1E4E8;">, { options: { platform: </span><span style="color:#9ECBFF;">&quot;qq&quot;</span><span style="color:#E1E4E8;">, origin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> } })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">sugar</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">来一首(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [</span><span style="color:#9ECBFF;">&quot;$1&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    options: { platform: </span><span style="color:#9ECBFF;">&quot;qq&quot;</span><span style="color:#E1E4E8;">, origin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">  }) </span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> }, </span><span style="color:#FFAB70;">keyword</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [keyword, </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(options)]);</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;music &lt;keyword:string&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-o [origin:boolean]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 是否原声输出</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-p [platform:string]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 选用音乐平台</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-s [singer:number]&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 指定歌手id</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">sugar</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;qq点歌&quot;</span><span style="color:#24292E;">, { options: { platform: </span><span style="color:#032F62;">&quot;qq&quot;</span><span style="color:#24292E;">, origin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> } })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">sugar</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">来一首(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    args: [</span><span style="color:#032F62;">&quot;$1&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    options: { platform: </span><span style="color:#032F62;">&quot;qq&quot;</span><span style="color:#24292E;">, origin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> },</span></span>
<span class="line diff add"><span style="color:#24292E;">  }) </span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">options</span><span style="color:#24292E;"> }, </span><span style="color:#E36209;">keyword</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [keyword, </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(options)]);</span></span></code></pre></div><p>这样一来，输入<strong>来一首烟雨行舟</strong>就等价于输入<code>music 烟雨行舟 -p qq -o</code>了。</p><p>不难看出，使用快捷方式会让你的输入方式更加接近自然语言，也会让你的机器人显得更平易近人。</p>`,4);function d(u,g,q,m,C,h){const a=t("ChatMsg"),p=t("ChatHistory");return c(),r("div",null,[y,s(p,null,{default:n(()=>[s(a,{id:"1659488338"},{default:n(()=>[o("music 烟雨行舟 -o -p qq -s 82329")]),_:1}),s(a,{id:"1689919782"},{default:n(()=>[o('{"options":true,"platform":"qq","singer":82329}')]),_:1})]),_:1}),i,s(p,null,{default:n(()=>[s(a,{id:"1659488338"},{default:n(()=>[o("qq点歌 烟雨行舟")]),_:1}),s(a,{id:"1689919782"},{default:n(()=>[o('{"options":true,"platform":"qq"}')]),_:1})]),_:1}),F])}const f=e(E,[["render",d]]);export{A as __pageData,f as default};
